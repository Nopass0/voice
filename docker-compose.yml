version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: voice_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-voice_secure_password}
      POSTGRES_DB: voicedb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - voice_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: voice_backend
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-voice_secure_password}@postgres:5432/voicedb?schema=public
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - voice_network
    restart: unless-stopped
    volumes:
      - ./backend/uploads:/app/uploads

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: voice_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://backend:3000
      NODE_ENV: production
    ports:
      - "3001:3001"
    depends_on:
      - backend
    networks:
      - voice_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: voice_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - voice_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  voice_network:
    driver: bridge